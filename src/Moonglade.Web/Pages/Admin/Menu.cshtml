@page "/admin/menu"
@model Moonglade.Web.Pages.Admin.MenuModel
@{
    Layout = "_LayoutAdmin";
    ViewBag.Title = "Manage Menus";
}

@section scripts{
    <script>
        var menuJson = @Html.Raw(Model.MenuItems.ToJson());

        function expandSubMenu(topMenuId, subMenuEditViewModels) {
            subMenuEditViewModels.forEach(function(sm) {
                var h = '';
                h += `<a id="menu-${sm.id}" href="javascript:loadSubMenuEditor('${topMenuId}', '${sm.id}');" class="list-group-item list-group-item-action">${sm.title}</a>`;

                $('.submenu-list').html(h);
            });
        }

        function findTopMenu(topMenuId) {
            var menu = menuJson.filter((m) => {
                return m.Id == topMenuId;
            });

            return menu[0];
        }

        function findSubMenu(father, subMenuId) {
            var subMenu = father.SubMenus.filter((sm) => {
                return sm.Id == subMenuId;
            });

            if (subMenu && subMenu.length > 0) {
                return subMenu[0];
            }
            return null;
        }

        function clearSubMenus() {
            $('.submenu-list').html('');
        }

        function loadMenuEditor(topMenuId) {
            $('.top-menu-editor').show();
            $('.sub-menu-editor').hide();
            $('.btn-create-submenu').show();

            $('.top-menu-list a').removeClass('active');
            $(`#menu-${topMenuId}`).addClass('active');

            callApi(`/api/menu/edit/${topMenuId}`,
                'GET',
                {},
                async (resp) => {
                    var data = await resp.json();
                    $('#topmenu-id').val(data.id);
                    $('#topmenu-title').val(data.title);
                    $('#topmenu-url').val(data.url);
                    $('#topmenu-iconcssclass').val(data.icon);
                    $('#topmenu-displayorder').val(data.displayOrder);
                    if (data.isOpenInNewTab) {
                        $('#topmenu-isopeninnewtab').prop('checked', 'checked');
                    } else {
                        $('#topmenu-isopeninnewtab').prop('checked', null);
                    }

                    $('.btn-delete').show();
                    $('.btn-delete').data('menuid', topMenuId);

                    if (data.subMenus.length > 0) {
                        $('#topmenu-url, #topmenu-iconcssclass').attr('readonly', '');
                        expandSubMenu(topMenuId, data.subMenus);
                    } else {
                        $('#topmenu-url, #topmenu-iconcssclass').attr('readonly', null);
                        clearSubMenus();
                    }
                });
        }

        function loadSubMenuEditor(topMenuId, subMenuId) {
            $('.top-menu-editor').hide();
            $('.sub-menu-editor').show();
            $('.btn-delete-submenu').show();
            $('.btn-delete-submenu').data('menuid', subMenuId);

            var father = findTopMenu(topMenuId);
            var currentSm = findSubMenu(father, subMenuId);

            console.debug(currentSm);

            $('#submenu-id').val(currentSm.Id);
            $('#submenu-title').val(currentSm.Title);
            $('#submenu-url').val(currentSm.Url);

            if (currentSm.IsOpenInNewTab) {
                $('#submenu-isopeninnewtab').prop('checked', 'checked');
            } else {
                $('#submenu-isopeninnewtab').prop('checked', null);
            }
        }

        $('.btn-delete').click(function() {
            var cfm = confirm("Delete Confirmation?");
            if (cfm) deleteMenu($(this).data("menuid"));
        });

        function initCreateMenu() {
            $('#topmenu-id').val(emptyGuid);
            $('#edit-form')[0].reset();
            $('.btn-delete').hide();

            $('.top-menu-list a').removeClass('active');
            $('.fg-open-in-new-tab').show();
            $('#topmenu-url, #topmenu-iconcssclass').attr('readonly', null);
            clearSubMenus();
        }

        function initCreateSubMenu() {

        }

        function deleteMenu(menuid) {
            callApi(`/api/menu/${menuid}`,
                'DELETE',
                {},
                (resp) => {
                    initCreateMenu();
                    $(`#menu-${menuid}`).hide();
                });
        }

        $(".btn-submit").click(function() {
            if ($("#edit-form").valid()) {
                var action = '';
                var menuId = $("#topmenu-id").val();
                if (menuId == emptyGuid) {
                    action = "create";
                } else {
                    action = "edit";
                }

                callApi(`/api/menu/${action}`,
                    'POST',
                    {
                        "Id": $("#topmenu-id").val(),
                        "Title": $("#topmenu-title").val(),
                        "Url": $("#topmenu-url").val(),
                        "Icon": $("#topmenu-iconcssclass").val(),
                        "DisplayOrder": parseInt($("#topmenu-displayorder").val()),
                        "IsOpenInNewTab": $('#topmenu-isopeninnewtab').prop('checked'),
                        "SubMenus": findTopMenu(menuId).SubMenus
                    },
                    (resp) => {
                        $("#edit-form")[0].reset();
                        $("#edit-form-submenu")[0].reset();

                        //notyf.success('Menu updated');
                        window.location.reload();
                    });
            }
        });
    </script>
}

<h3>
    @Localizer["Navigation Menus"]
</h3>
<hr />

<div class="alert alert-info">
    @Localizer["To turn on / off system navigation items (Categories / Tags / Archive), edit"] <code>appsettings.json</code> @Localizer["or override with environment variables."]
</div>

@if (null != Model.MenuItems)
{
    if (Model.MenuItems.Count == 0)
    {
        <div class="alert alert-info">@Localizer["No Customized Menus"]</div>
    }

    <div class="row">
        <div class="col-3">
            <h5>@Localizer["Top Level"]</h5>
            <hr />
            <div class="list-group top-menu-list mb-2">
                @foreach (var menu in Model.MenuItems.OrderBy(m => m.DisplayOrder))
                {
                    @if (menu.SubMenus.Count > 0)
                    {
                        <a id="menu-@menu.Id" class="list-group-item list-group-item-action"
                           href="javascript:loadMenuEditor('@menu.Id');">
                            <span class="icon-list mr-2"></span>
                            @menu.Title

                            <span class="text-muted float-right">
                                ...
                            </span>
                        </a>
                    }
                    else
                    {
                        <a id="menu-@menu.Id" class="list-group-item list-group-item-action"
                           href="javascript:loadMenuEditor('@menu.Id');">
                            <span class="@menu.Icon mr-2"></span>
                            @menu.Title
                        </a>
                    }
                }
            </div>
            <a class="btn btn-outline-success btn-block" href="javascript:initCreateMenu();">
                <span class="icon-plus"></span>
                @Localizer["New"]
            </a>
        </div>
        <div class="col-3">
            <h5>@Localizer["Sub Menu"]</h5>
            <hr />
            <div class="list-group submenu-list mb-2">

            </div>
            <a class="btn btn-outline-success btn-block btn-create-submenu" style="display: none;" href="javascript:initCreateSubMenu();">
                <span class="icon-plus"></span>
                @Localizer["New"]
            </a>
        </div>
        <div class="col-6">
            <h5>@Localizer["Menu Editor"]</h5>
            <hr />
            <div class="top-menu-editor">
                <form id="edit-form" method="post">
                    <input type="hidden" id="topmenu-id" />
                    <div class="form-group">
                        <input id="topmenu-title" placeholder="@Localizer["Title"]" class="form-control" max-length="64" required />
                    </div>
                    <div class="form-group">
                        <input id="topmenu-url" placeholder="@Localizer["Url (Relative or Absolute)"]" class="form-control" max-length="256" required />
                    </div>
                    <div class="form-group">
                        <input id="topmenu-iconcssclass" placeholder="@Localizer["Icon CSS Class"]" class="form-control" pattern="[a-z0-9-]+" />
                        <small class="text-muted">Check <a href="https://github.com/EdiWang/Moonglade-Icons" target="_blank">here</a> for icons</small>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Order</span>
                            </div>
                            <input id="topmenu-displayorder" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="custom-control custom-checkbox">
                            <input id="topmenu-isopeninnewtab" class="custom-control-input" type="checkbox">
                            <label for="topmenu-isopeninnewtab" class="custom-control-label">@Localizer["Open in New Tab"]</label>
                        </div>
                    </div>
                    <hr />
                    <button type="button" class="btn btn-success btn-submit">@Localizer["Submit"]</button>
                    <button type="button" class="btn btn-secondary">@Localizer["Cancel"]</button>

                    <a href="javascript:;" data-menuid="" class="btn btn-outline-danger btn-delete" style="display: none;"><span class="icon-bin"></span></a>
                </form>
            </div>

            <div class="sub-menu-editor" style="display: none;">
                <form id="edit-form-submenu" method="post">
                    <input type="hidden" id="submenu-id" />
                    <div class="form-group">
                        <input id="submenu-title" placeholder="@Localizer["Title"]" class="form-control" max-length="64" required />
                    </div>
                    <div class="form-group">
                        <input id="submenu-url" placeholder="@Localizer["Url (Relative or Absolute)"]" class="form-control" max-length="256" required />
                    </div>
                    <div class="form-group">
                        <div class="custom-control custom-checkbox">
                            <input id="submenu-isopeninnewtab" class="custom-control-input" type="checkbox">
                            <label for="submenu-isopeninnewtab" class="custom-control-label">@Localizer["Open in New Tab"]</label>
                        </div>
                    </div>
                    <hr />
                    <button type="button" class="btn btn-success btn-submit-submenu">@Localizer["Submit"]</button>
                    <button type="button" class="btn btn-secondary">@Localizer["Cancel"]</button>

                    <a href="javascript:;" data-menuid="" class="btn btn-outline-danger btn-delete-submenu" style="display: none;"><span class="icon-bin"></span></a>
                </form>
            </div>
        </div>
    </div>
}